#--coding:utf8 --

import json
import ssr.utils
from ssr.systemd import Proxy

# 禁止高危漏洞服务

#Bluetooth服务
BLUETOOTH_SERVICE = "bluetooth"
#cups 服务
CUPS_SERVICE = "cups"
#avahi-daemon 服务
AVAHI_SERVICE = "avahi-daemon"
#rpcbind 服务
RPCBIND_SERVICE = "rpcbind"
#smb 服务
SMB_SERVICE = "smb"

class VulnerabilitySysctl(object):
    def __init__(self):
        self.bluetooth_proxy = ssr.systemd.Proxy(BLUETOOTH_SERVICE)
        self.cups_proxy = ssr.systemd.Proxy(CUPS_SERVICE)
        self.avahi_proxy = ssr.systemd.Proxy(AVAHI_SERVICE)
        self.rpcbind_proxy = ssr.systemd.Proxy(RPCBIND_SERVICE)
        self.smb_proxy = ssr.systemd.Proxy(SMB_SERVICE)

    def get(self):
        retdata = dict()
        #都为非活跃状态才为符合
        retdata[BLUETOOTH_SERVICE] = self.bluetooth_proxy.is_active()
        retdata[CUPS_SERVICE] = self.cups_proxy.is_active()
        retdata[AVAHI_SERVICE] = self.avahi_proxy.is_active()
        retdata[RPCBIND_SERVICE] = self.rpcbind_proxy.is_active()
        retdata[SMB_SERVICE] = self.smb_proxy.is_active()

        return (True, json.dumps(retdata))

    def set(self, args_json):
        args = json.loads(args_json)

        # 也可以不用捕获异常，后台框架会对异常进行处理
        try:
            if args[BLUETOOTH_SERVICE]:
                if self.bluetooth_proxy.exist():
                    self.bluetooth_proxy.enable()
                    self.bluetooth_proxy.restart()
            else:
                if self.bluetooth_proxy.exist():
                    #self.bluetooth_proxy.kill()
                    if self.bluetooth_proxy.stop():
                        return (False, 'Unable to stop bluetooth service! \t\t')
                    self.bluetooth_proxy.disable()
            if args[CUPS_SERVICE]:
                if self.cups_proxy.exist():
                    self.cups_proxy.enable()
                    self.cups_proxy.restart()
            else:
                if self.cups_proxy.exist():
                    #self.cups_proxy.kill()
                    if self.cups_proxy.stop():
                        return (False, 'Unable to stop cups service! \t\t')
                    self.cups_proxy.disable()
            if args[AVAHI_SERVICE]:
                if self.avahi_proxy.exist():
                    #avahi-daemon服务需要将socket一起开启
                    if ssr.utils.subprocess_has_output('systemctl list-unit-files | grep avahi-daemon.socket | wc -l') == '1':
                        ssr.utils.subprocess_not_output('systemctl enable avahi-daemon.socket && systemctl enable avahi-daemon.service')
                        ssr.utils.subprocess_not_output('systemctl restart avahi-daemon.socket && systemctl restart avahi-daemon.service')
                    else:
                        self.avahi_proxy.enable()
                        self.avahi_proxy.restart()
            else:
                if self.avahi_proxy.exist():
                    #self.avahi_proxy.kill()
                    #avahi-daemon服务需要将socket一起关闭
                    if ssr.utils.subprocess_has_output('systemctl list-unit-files | grep avahi-daemon.socket | wc -l') == '1':
                        ssr.utils.subprocess_not_output('systemctl disable avahi-daemon.socket && systemctl disable avahi-daemon.service')
                        ssr.utils.subprocess_not_output('systemctl stop avahi-daemon.socket && systemctl stop avahi-daemon.service')
                    else:
                        if self.avahi_proxy.stop():
                            return (False, 'Unable to stop avahi service! \t\t')
                        self.avahi_proxy.disable()
            if args[RPCBIND_SERVICE]:
                if self.rpcbind_proxy.exist():
                    self.rpcbind_proxy.enable()
                    self.rpcbind_proxy.restart()
            else:
                if self.rpcbind_proxy.exist():
                    #self.rpcbind_proxy.kill()
                    if self.rpcbind_proxy.stop():
                        return (False, 'Unable to stop rpcbind service! \t\t')
                    self.rpcbind_proxy.disable()
            if args[SMB_SERVICE]:
                if self.smb_proxy.exist():
                    self.smb_proxy.enable()
                    self.smb_proxy.restart()
            else:
                if self.smb_proxy.exist():
                    #self.smb_proxy.kill()
                    if self.smb_proxy.stop():
                        return (False, 'Unable to stop smb service! \t\t')
                    self.smb_proxy.disable()
            return (True, '')
        except Exception as e:
            return (False, str(e))

